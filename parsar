from mini_ast import *

def parse(tokens):
    pos = 0
    
    def expect(expected_type):
        nonlocal pos
        if pos < len(tokens) and tokens[pos][0] == expected_type:
            pos += 1
            return tokens[pos - 1][1]
        raise Exception(f"Expected {expected_type}, got {tokens[pos] if pos < len(tokens) else 'EOF'}")

    def parse_expr():
        nonlocal pos
        left = parse_term()
        while pos < len(tokens) and tokens[pos][0] in ('+', '-'):
            op = tokens[pos][0]
            pos += 1
            right = parse_term()
            left = BinaryOp(left, op, right)
        return left

    def parse_term():
        nonlocal pos
        left = parse_factor()
        while pos < len(tokens) and tokens[pos][0] in ('*', '/'):
            op = tokens[pos][0]
            pos += 1
            right = parse_factor()
            left = BinaryOp(left, op, right)
        return left

    def parse_factor():
        nonlocal pos
        if tokens[pos][0] == 'NUMBER':
            value = float(expect('NUMBER'))  # Handle both integers and floats
            return Number(value)
        elif tokens[pos][0] == 'IDENT':
            name = expect('IDENT')
            return Variable(name)
        elif tokens[pos][0] == '(':
            expect('(')
            expr = parse_expr()
            expect(')')
            return expr
        else:
            raise Exception(f"Invalid token: {tokens[pos][0]}")

    def parse_stmt():
        nonlocal pos
        if tokens[pos][0] == 'LET':
            expect('LET')
            name = expect('IDENT')
            expect('=')
            expr = parse_expr()
            return LetStatement(name, expr)
        elif tokens[pos][0] == 'PRINT':
            expect('PRINT')
            expect('(')
            expr = parse_expr()
            expect(')')
            return PrintStatement(expr)
        else:
            return parse_expr()

    return parse_stmt()
