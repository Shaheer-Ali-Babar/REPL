from mini_ast import Number, Variable, BinaryOp, LetStatement, PrintStatement  # Add this line

def evaluate(node, env):
    # ... rest of the code ...def evaluate(node, env):
    if isinstance(node, Number):
        return node.value
    elif isinstance(node, Variable):
        return env.get(node.name, 0)
    elif isinstance(node, BinaryOp):
        left = evaluate(node.left, env)
        right = evaluate(node.right, env)
        if node.op == '+': return left + right
        if node.op == '-': return left - right
        if node.op == '*': return left * right
        if node.op == '/': return left / right
    elif isinstance(node, LetStatement):
        value = evaluate(node.expr, env)
        env[node.name] = value
        return None  # Explicitly return None for statements
    elif isinstance(node, PrintStatement):
        value = evaluate(node.expr, env)
        print(value)
        return None  # Explicitly return None for statements
    else:
        raise Exception(f"Unknown node type: {type(node).__name__}")
